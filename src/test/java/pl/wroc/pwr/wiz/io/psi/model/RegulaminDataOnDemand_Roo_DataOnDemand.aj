// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.wroc.pwr.wiz.io.psi.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import pl.wroc.pwr.wiz.io.psi.model.Regulamin;
import pl.wroc.pwr.wiz.io.psi.model.RegulaminDataOnDemand;

privileged aspect RegulaminDataOnDemand_Roo_DataOnDemand {
    
    declare @type: RegulaminDataOnDemand: @Component;
    
    private Random RegulaminDataOnDemand.rnd = new SecureRandom();
    
    private List<Regulamin> RegulaminDataOnDemand.data;
    
    public Regulamin RegulaminDataOnDemand.getNewTransientRegulamin(int index) {
        Regulamin obj = new Regulamin();
        setOdKiedy(obj, index);
        setTresc(obj, index);
        return obj;
    }
    
    public void RegulaminDataOnDemand.setOdKiedy(Regulamin obj, int index) {
        Date odKiedy = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setOdKiedy(odKiedy);
    }
    
    public void RegulaminDataOnDemand.setTresc(Regulamin obj, int index) {
        String tresc = "tresc_" + index;
        obj.setTresc(tresc);
    }
    
    public Regulamin RegulaminDataOnDemand.getSpecificRegulamin(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Regulamin obj = data.get(index);
        Long id = obj.getId();
        return Regulamin.findRegulamin(id);
    }
    
    public Regulamin RegulaminDataOnDemand.getRandomRegulamin() {
        init();
        Regulamin obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Regulamin.findRegulamin(id);
    }
    
    public boolean RegulaminDataOnDemand.modifyRegulamin(Regulamin obj) {
        return false;
    }
    
    public void RegulaminDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Regulamin.findRegulaminEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Regulamin' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Regulamin>();
        for (int i = 0; i < 10; i++) {
            Regulamin obj = getNewTransientRegulamin(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
