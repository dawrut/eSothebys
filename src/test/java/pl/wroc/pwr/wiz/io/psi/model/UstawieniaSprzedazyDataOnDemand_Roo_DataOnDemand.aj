// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.wroc.pwr.wiz.io.psi.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import pl.wroc.pwr.wiz.io.psi.model.Kolor;
import pl.wroc.pwr.wiz.io.psi.model.UstawieniaSprzedazy;
import pl.wroc.pwr.wiz.io.psi.model.UstawieniaSprzedazyDataOnDemand;

privileged aspect UstawieniaSprzedazyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UstawieniaSprzedazyDataOnDemand: @Component;
    
    private Random UstawieniaSprzedazyDataOnDemand.rnd = new SecureRandom();
    
    private List<UstawieniaSprzedazy> UstawieniaSprzedazyDataOnDemand.data;
    
    public UstawieniaSprzedazy UstawieniaSprzedazyDataOnDemand.getNewTransientUstawieniaSprzedazy(int index) {
        UstawieniaSprzedazy obj = new UstawieniaSprzedazy();
        setDomyslnieZnakWodny(obj, index);
        setKolorZnakuWodnego(obj, index);
        setLokalizacjaZnakuWodnego(obj, index);
        setNumerKonta1(obj, index);
        setNumerKonta2(obj, index);
        setPrzezroczystoscZnakuWodnego(obj, index);
        setWiadomoscDlaKupujacych(obj, index);
        setWidocznyNumerKonta1(obj, index);
        setWidocznyNumerKonta2(obj, index);
        return obj;
    }
    
    public void UstawieniaSprzedazyDataOnDemand.setDomyslnieZnakWodny(UstawieniaSprzedazy obj, int index) {
        Boolean domyslnieZnakWodny = Boolean.TRUE;
        obj.setDomyslnieZnakWodny(domyslnieZnakWodny);
    }
    
    public void UstawieniaSprzedazyDataOnDemand.setKolorZnakuWodnego(UstawieniaSprzedazy obj, int index) {
        Kolor kolorZnakuWodnego = Kolor.class.getEnumConstants()[0];
        obj.setKolorZnakuWodnego(kolorZnakuWodnego);
    }
    
    public void UstawieniaSprzedazyDataOnDemand.setLokalizacjaZnakuWodnego(UstawieniaSprzedazy obj, int index) {
        int lokalizacjaZnakuWodnego = index;
        obj.setLokalizacjaZnakuWodnego(lokalizacjaZnakuWodnego);
    }
    
    public void UstawieniaSprzedazyDataOnDemand.setNumerKonta1(UstawieniaSprzedazy obj, int index) {
        int numerKonta1 = index;
        obj.setNumerKonta1(numerKonta1);
    }
    
    public void UstawieniaSprzedazyDataOnDemand.setNumerKonta2(UstawieniaSprzedazy obj, int index) {
        int numerKonta2 = index;
        obj.setNumerKonta2(numerKonta2);
    }
    
    public void UstawieniaSprzedazyDataOnDemand.setPrzezroczystoscZnakuWodnego(UstawieniaSprzedazy obj, int index) {
        int przezroczystoscZnakuWodnego = index;
        obj.setPrzezroczystoscZnakuWodnego(przezroczystoscZnakuWodnego);
    }
    
    public void UstawieniaSprzedazyDataOnDemand.setWiadomoscDlaKupujacych(UstawieniaSprzedazy obj, int index) {
        String wiadomoscDlaKupujacych = "wiadomoscDlaKupujacych_" + index;
        obj.setWiadomoscDlaKupujacych(wiadomoscDlaKupujacych);
    }
    
    public void UstawieniaSprzedazyDataOnDemand.setWidocznyNumerKonta1(UstawieniaSprzedazy obj, int index) {
        Boolean widocznyNumerKonta1 = Boolean.TRUE;
        obj.setWidocznyNumerKonta1(widocznyNumerKonta1);
    }
    
    public void UstawieniaSprzedazyDataOnDemand.setWidocznyNumerKonta2(UstawieniaSprzedazy obj, int index) {
        Boolean widocznyNumerKonta2 = Boolean.TRUE;
        obj.setWidocznyNumerKonta2(widocznyNumerKonta2);
    }
    
    public UstawieniaSprzedazy UstawieniaSprzedazyDataOnDemand.getSpecificUstawieniaSprzedazy(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UstawieniaSprzedazy obj = data.get(index);
        Long id = obj.getId();
        return UstawieniaSprzedazy.findUstawieniaSprzedazy(id);
    }
    
    public UstawieniaSprzedazy UstawieniaSprzedazyDataOnDemand.getRandomUstawieniaSprzedazy() {
        init();
        UstawieniaSprzedazy obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return UstawieniaSprzedazy.findUstawieniaSprzedazy(id);
    }
    
    public boolean UstawieniaSprzedazyDataOnDemand.modifyUstawieniaSprzedazy(UstawieniaSprzedazy obj) {
        return false;
    }
    
    public void UstawieniaSprzedazyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = UstawieniaSprzedazy.findUstawieniaSprzedazyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UstawieniaSprzedazy' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UstawieniaSprzedazy>();
        for (int i = 0; i < 10; i++) {
            UstawieniaSprzedazy obj = getNewTransientUstawieniaSprzedazy(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
