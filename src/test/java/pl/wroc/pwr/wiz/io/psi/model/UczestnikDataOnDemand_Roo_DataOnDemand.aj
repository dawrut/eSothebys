// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.wroc.pwr.wiz.io.psi.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import pl.wroc.pwr.wiz.io.psi.model.SposobAktywacji;
import pl.wroc.pwr.wiz.io.psi.model.StanKonta;
import pl.wroc.pwr.wiz.io.psi.model.Uczestnik;
import pl.wroc.pwr.wiz.io.psi.model.UczestnikDataOnDemand;

privileged aspect UczestnikDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UczestnikDataOnDemand: @Component;
    
    private Random UczestnikDataOnDemand.rnd = new SecureRandom();
    
    private List<Uczestnik> UczestnikDataOnDemand.data;
    
    public Uczestnik UczestnikDataOnDemand.getNewTransientUczestnik(int index) {
        Uczestnik obj = new Uczestnik();
        setAkceptacjaZmianRegulaminu(obj, index);
        setCzyWykonalAkcje(obj, index);
        setDataOstatniegoLogowania(obj, index);
        setDataRozpoczeciaZamknieciaKonta(obj, index);
        setDataUrodzenia(obj, index);
        setDataUtworzenia(obj, index);
        setDataZamknieciaKonta(obj, index);
        setDrugiTelefon(obj, index);
        setFirma(obj, index);
        setImie(obj, index);
        setKodAktywacyjny(obj, index);
        setLogin(obj, index);
        setNazwisko(obj, index);
        setOdKiedyZawieszone(obj, index);
        setPesel(obj, index);
        setPowodZamknieciaKonta(obj, index);
        setSposobAktywacji(obj, index);
        setStanKonta(obj, index);
        setTelefon(obj, index);
        setZamowioneZestawienieTransakcji(obj, index);
        return obj;
    }
    
    public void UczestnikDataOnDemand.setAkceptacjaZmianRegulaminu(Uczestnik obj, int index) {
        Date akceptacjaZmianRegulaminu = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setAkceptacjaZmianRegulaminu(akceptacjaZmianRegulaminu);
    }
    
    public void UczestnikDataOnDemand.setCzyWykonalAkcje(Uczestnik obj, int index) {
        Boolean czyWykonalAkcje = Boolean.TRUE;
        obj.setCzyWykonalAkcje(czyWykonalAkcje);
    }
    
    public void UczestnikDataOnDemand.setDataOstatniegoLogowania(Uczestnik obj, int index) {
        Date dataOstatniegoLogowania = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataOstatniegoLogowania(dataOstatniegoLogowania);
    }
    
    public void UczestnikDataOnDemand.setDataRozpoczeciaZamknieciaKonta(Uczestnik obj, int index) {
        Date dataRozpoczeciaZamknieciaKonta = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataRozpoczeciaZamknieciaKonta(dataRozpoczeciaZamknieciaKonta);
    }
    
    public void UczestnikDataOnDemand.setDataUrodzenia(Uczestnik obj, int index) {
        Date dataUrodzenia = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataUrodzenia(dataUrodzenia);
    }
    
    public void UczestnikDataOnDemand.setDataUtworzenia(Uczestnik obj, int index) {
        Date dataUtworzenia = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataUtworzenia(dataUtworzenia);
    }
    
    public void UczestnikDataOnDemand.setDataZamknieciaKonta(Uczestnik obj, int index) {
        Date dataZamknieciaKonta = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataZamknieciaKonta(dataZamknieciaKonta);
    }
    
    public void UczestnikDataOnDemand.setDrugiTelefon(Uczestnik obj, int index) {
        String drugiTelefon = "drugiTelefon_" + index;
        obj.setDrugiTelefon(drugiTelefon);
    }
    
    public void UczestnikDataOnDemand.setFirma(Uczestnik obj, int index) {
        String firma = "firma_" + index;
        obj.setFirma(firma);
    }
    
    public void UczestnikDataOnDemand.setImie(Uczestnik obj, int index) {
        String imie = "imie_" + index;
        obj.setImie(imie);
    }
    
    public void UczestnikDataOnDemand.setKodAktywacyjny(Uczestnik obj, int index) {
        int kodAktywacyjny = index;
        obj.setKodAktywacyjny(kodAktywacyjny);
    }
    
    public void UczestnikDataOnDemand.setLogin(Uczestnik obj, int index) {
        String login = "login_" + index;
        obj.setLogin(login);
    }
    
    public void UczestnikDataOnDemand.setNazwisko(Uczestnik obj, int index) {
        String nazwisko = "nazwisko_" + index;
        obj.setNazwisko(nazwisko);
    }
    
    public void UczestnikDataOnDemand.setOdKiedyZawieszone(Uczestnik obj, int index) {
        Date odKiedyZawieszone = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setOdKiedyZawieszone(odKiedyZawieszone);
    }
    
    public void UczestnikDataOnDemand.setPesel(Uczestnik obj, int index) {
        String pesel = "pesel_" + index;
        obj.setPesel(pesel);
    }
    
    public void UczestnikDataOnDemand.setPowodZamknieciaKonta(Uczestnik obj, int index) {
        String powodZamknieciaKonta = "powodZamknieciaKonta_" + index;
        obj.setPowodZamknieciaKonta(powodZamknieciaKonta);
    }
    
    public void UczestnikDataOnDemand.setSposobAktywacji(Uczestnik obj, int index) {
        SposobAktywacji sposobAktywacji = SposobAktywacji.class.getEnumConstants()[0];
        obj.setSposobAktywacji(sposobAktywacji);
    }
    
    public void UczestnikDataOnDemand.setStanKonta(Uczestnik obj, int index) {
        StanKonta stanKonta = StanKonta.class.getEnumConstants()[0];
        obj.setStanKonta(stanKonta);
    }
    
    public void UczestnikDataOnDemand.setTelefon(Uczestnik obj, int index) {
        String telefon = "telefon_" + index;
        obj.setTelefon(telefon);
    }
    
    public void UczestnikDataOnDemand.setZamowioneZestawienieTransakcji(Uczestnik obj, int index) {
        Boolean zamowioneZestawienieTransakcji = Boolean.TRUE;
        obj.setZamowioneZestawienieTransakcji(zamowioneZestawienieTransakcji);
    }
    
    public Uczestnik UczestnikDataOnDemand.getSpecificUczestnik(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Uczestnik obj = data.get(index);
        Long id = obj.getId();
        return Uczestnik.findUczestnik(id);
    }
    
    public Uczestnik UczestnikDataOnDemand.getRandomUczestnik() {
        init();
        Uczestnik obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Uczestnik.findUczestnik(id);
    }
    
    public boolean UczestnikDataOnDemand.modifyUczestnik(Uczestnik obj) {
        return false;
    }
    
    public void UczestnikDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Uczestnik.findUczestnikEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Uczestnik' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Uczestnik>();
        for (int i = 0; i < 10; i++) {
            Uczestnik obj = getNewTransientUczestnik(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
