// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.wroc.pwr.wiz.io.psi.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import pl.wroc.pwr.wiz.io.psi.model.UzytkownikDataOnDemand;
import pl.wroc.pwr.wiz.io.psi.model.WniosekRejestracyjny;
import pl.wroc.pwr.wiz.io.psi.model.WniosekRejestracyjnyDataOnDemand;
import pl.wroc.pwr.wiz.io.psi.service.dao.WniosekRejestracyjnyService;

privileged aspect WniosekRejestracyjnyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: WniosekRejestracyjnyDataOnDemand: @Component;
    
    private Random WniosekRejestracyjnyDataOnDemand.rnd = new SecureRandom();
    
    private List<WniosekRejestracyjny> WniosekRejestracyjnyDataOnDemand.data;
    
    @Autowired
    UzytkownikDataOnDemand WniosekRejestracyjnyDataOnDemand.uzytkownikDataOnDemand;
    
    @Autowired
    WniosekRejestracyjnyService WniosekRejestracyjnyDataOnDemand.wniosekRejestracyjnyService;
    
    public WniosekRejestracyjny WniosekRejestracyjnyDataOnDemand.getNewTransientWniosekRejestracyjny(int index) {
        WniosekRejestracyjny obj = new WniosekRejestracyjny();
        setDataUrodzenia(obj, index);
        setDataZlozenia(obj, index);
        setEmail(obj, index);
        setHaslo(obj, index);
        return obj;
    }
    
    public void WniosekRejestracyjnyDataOnDemand.setDataUrodzenia(WniosekRejestracyjny obj, int index) {
        Date dataUrodzenia = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataUrodzenia(dataUrodzenia);
    }
    
    public void WniosekRejestracyjnyDataOnDemand.setDataZlozenia(WniosekRejestracyjny obj, int index) {
        Date dataZlozenia = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDataZlozenia(dataZlozenia);
    }
    
    public void WniosekRejestracyjnyDataOnDemand.setEmail(WniosekRejestracyjny obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public WniosekRejestracyjny WniosekRejestracyjnyDataOnDemand.getSpecificWniosekRejestracyjny(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        WniosekRejestracyjny obj = data.get(index);
        Long id = obj.getId();
        return wniosekRejestracyjnyService.findWniosekRejestracyjny(id);
    }
    
    public WniosekRejestracyjny WniosekRejestracyjnyDataOnDemand.getRandomWniosekRejestracyjny() {
        init();
        WniosekRejestracyjny obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return wniosekRejestracyjnyService.findWniosekRejestracyjny(id);
    }
    
    public boolean WniosekRejestracyjnyDataOnDemand.modifyWniosekRejestracyjny(WniosekRejestracyjny obj) {
        return false;
    }
    
    public void WniosekRejestracyjnyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = wniosekRejestracyjnyService.findWniosekRejestracyjnyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'WniosekRejestracyjny' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<WniosekRejestracyjny>();
        for (int i = 0; i < 10; i++) {
            WniosekRejestracyjny obj = getNewTransientWniosekRejestracyjny(i);
            try {
                wniosekRejestracyjnyService.saveWniosekRejestracyjny(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
