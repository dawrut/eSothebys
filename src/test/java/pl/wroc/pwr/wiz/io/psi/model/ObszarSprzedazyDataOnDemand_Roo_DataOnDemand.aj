// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.wroc.pwr.wiz.io.psi.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.stereotype.Component;
import pl.wroc.pwr.wiz.io.psi.model.ObszarSprzedazy;
import pl.wroc.pwr.wiz.io.psi.model.ObszarSprzedazyDataOnDemand;

privileged aspect ObszarSprzedazyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ObszarSprzedazyDataOnDemand: @Component;
    
    private Random ObszarSprzedazyDataOnDemand.rnd = new SecureRandom();
    
    private List<ObszarSprzedazy> ObszarSprzedazyDataOnDemand.data;
    
    public ObszarSprzedazy ObszarSprzedazyDataOnDemand.getNewTransientObszarSprzedazy(int index) {
        ObszarSprzedazy obj = new ObszarSprzedazy();
        setNazwa(obj, index);
        return obj;
    }
    
    public void ObszarSprzedazyDataOnDemand.setNazwa(ObszarSprzedazy obj, int index) {
        String nazwa = "nazwa_" + index;
        obj.setNazwa(nazwa);
    }
    
    public ObszarSprzedazy ObszarSprzedazyDataOnDemand.getSpecificObszarSprzedazy(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ObszarSprzedazy obj = data.get(index);
        Long id = obj.getId();
        return ObszarSprzedazy.findObszarSprzedazy(id);
    }
    
    public ObszarSprzedazy ObszarSprzedazyDataOnDemand.getRandomObszarSprzedazy() {
        init();
        ObszarSprzedazy obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return ObszarSprzedazy.findObszarSprzedazy(id);
    }
    
    public boolean ObszarSprzedazyDataOnDemand.modifyObszarSprzedazy(ObszarSprzedazy obj) {
        return false;
    }
    
    public void ObszarSprzedazyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ObszarSprzedazy.findObszarSprzedazyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ObszarSprzedazy' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ObszarSprzedazy>();
        for (int i = 0; i < 10; i++) {
            ObszarSprzedazy obj = getNewTransientObszarSprzedazy(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
