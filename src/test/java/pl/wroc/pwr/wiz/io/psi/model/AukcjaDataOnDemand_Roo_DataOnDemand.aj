// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.wroc.pwr.wiz.io.psi.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import pl.wroc.pwr.wiz.io.psi.model.AdresDataOnDemand;
import pl.wroc.pwr.wiz.io.psi.model.Aukcja;
import pl.wroc.pwr.wiz.io.psi.model.AukcjaDataOnDemand;
import pl.wroc.pwr.wiz.io.psi.model.DefinicjaJednostkiPrzedmiotu;
import pl.wroc.pwr.wiz.io.psi.model.KategoriaDataOnDemand;
import pl.wroc.pwr.wiz.io.psi.model.RodzajAukcji;
import pl.wroc.pwr.wiz.io.psi.model.TerminWysylki;
import pl.wroc.pwr.wiz.io.psi.model.UczestnikDataOnDemand;
import pl.wroc.pwr.wiz.io.psi.model.ZdjecieDataOnDemand;

privileged aspect AukcjaDataOnDemand_Roo_DataOnDemand {
    
    declare @type: AukcjaDataOnDemand: @Component;
    
    private Random AukcjaDataOnDemand.rnd = new SecureRandom();
    
    private List<Aukcja> AukcjaDataOnDemand.data;
    
    @Autowired
    KategoriaDataOnDemand AukcjaDataOnDemand.kategoriaDataOnDemand;
    
    @Autowired
    AdresDataOnDemand AukcjaDataOnDemand.adresDataOnDemand;
    
    @Autowired
    ZdjecieDataOnDemand AukcjaDataOnDemand.zdjecieDataOnDemand;
    
    @Autowired
    UczestnikDataOnDemand AukcjaDataOnDemand.uczestnikDataOnDemand;
    
    public Aukcja AukcjaDataOnDemand.getNewTransientAukcja(int index) {
        Aukcja obj = new Aukcja();
        setCenaKupTeraz(obj, index);
        setCenaMinimalna(obj, index);
        setCenaWywolawcza(obj, index);
        setCennikDostawy(obj, index);
        setDodatkoweInformacjeODostawiePlatnosci(obj, index);
        setFakturaVAT(obj, index);
        setJednostka(obj, index);
        setKosztPrzesylkiPokrywaKupujacy(obj, index);
        setLiczbaOdwiedzin(obj, index);
        setLiczbaPrzedmiotow(obj, index);
        setNumberKonta1(obj, index);
        setNumberKonta2(obj, index);
        setOpisPrzedmiotu(obj, index);
        setRodzajAukcji(obj, index);
        setSzablon(obj, index);
        setTerminOstatnichOdwiedzin(obj, index);
        setTerminRozpoczecia(obj, index);
        setTerminWysylki(obj, index);
        setTytul(obj, index);
        setWysylkaZaGranice(obj, index);
        return obj;
    }
    
    public void AukcjaDataOnDemand.setCenaKupTeraz(Aukcja obj, int index) {
        double cenaKupTeraz = new Integer(index).doubleValue();
        obj.setCenaKupTeraz(cenaKupTeraz);
    }
    
    public void AukcjaDataOnDemand.setCenaMinimalna(Aukcja obj, int index) {
        double cenaMinimalna = new Integer(index).doubleValue();
        obj.setCenaMinimalna(cenaMinimalna);
    }
    
    public void AukcjaDataOnDemand.setCenaWywolawcza(Aukcja obj, int index) {
        double cenaWywolawcza = new Integer(index).doubleValue();
        obj.setCenaWywolawcza(cenaWywolawcza);
    }
    
    public void AukcjaDataOnDemand.setCennikDostawy(Aukcja obj, int index) {
        Aukcja cennikDostawy = obj;
        obj.setCennikDostawy(cennikDostawy);
    }
    
    public void AukcjaDataOnDemand.setDodatkoweInformacjeODostawiePlatnosci(Aukcja obj, int index) {
        String dodatkoweInformacjeODostawiePlatnosci = "dodatkoweInformacjeODostawiePlatnosci_" + index;
        obj.setDodatkoweInformacjeODostawiePlatnosci(dodatkoweInformacjeODostawiePlatnosci);
    }
    
    public void AukcjaDataOnDemand.setFakturaVAT(Aukcja obj, int index) {
        Boolean fakturaVAT = Boolean.TRUE;
        obj.setFakturaVAT(fakturaVAT);
    }
    
    public void AukcjaDataOnDemand.setJednostka(Aukcja obj, int index) {
        DefinicjaJednostkiPrzedmiotu jednostka = DefinicjaJednostkiPrzedmiotu.class.getEnumConstants()[0];
        obj.setJednostka(jednostka);
    }
    
    public void AukcjaDataOnDemand.setKosztPrzesylkiPokrywaKupujacy(Aukcja obj, int index) {
        Boolean kosztPrzesylkiPokrywaKupujacy = Boolean.TRUE;
        obj.setKosztPrzesylkiPokrywaKupujacy(kosztPrzesylkiPokrywaKupujacy);
    }
    
    public void AukcjaDataOnDemand.setLiczbaOdwiedzin(Aukcja obj, int index) {
        int liczbaOdwiedzin = index;
        obj.setLiczbaOdwiedzin(liczbaOdwiedzin);
    }
    
    public void AukcjaDataOnDemand.setLiczbaPrzedmiotow(Aukcja obj, int index) {
        int liczbaPrzedmiotow = index;
        obj.setLiczbaPrzedmiotow(liczbaPrzedmiotow);
    }
    
    public void AukcjaDataOnDemand.setNumberKonta1(Aukcja obj, int index) {
        int numberKonta1 = index;
        obj.setNumberKonta1(numberKonta1);
    }
    
    public void AukcjaDataOnDemand.setNumberKonta2(Aukcja obj, int index) {
        int numberKonta2 = index;
        obj.setNumberKonta2(numberKonta2);
    }
    
    public void AukcjaDataOnDemand.setOpisPrzedmiotu(Aukcja obj, int index) {
        String opisPrzedmiotu = "opisPrzedmiotu_" + index;
        obj.setOpisPrzedmiotu(opisPrzedmiotu);
    }
    
    public void AukcjaDataOnDemand.setRodzajAukcji(Aukcja obj, int index) {
        RodzajAukcji rodzajAukcji = RodzajAukcji.class.getEnumConstants()[0];
        obj.setRodzajAukcji(rodzajAukcji);
    }
    
    public void AukcjaDataOnDemand.setSzablon(Aukcja obj, int index) {
        Boolean szablon = Boolean.TRUE;
        obj.setSzablon(szablon);
    }
    
    public void AukcjaDataOnDemand.setTerminOstatnichOdwiedzin(Aukcja obj, int index) {
        Date terminOstatnichOdwiedzin = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTerminOstatnichOdwiedzin(terminOstatnichOdwiedzin);
    }
    
    public void AukcjaDataOnDemand.setTerminRozpoczecia(Aukcja obj, int index) {
        Date terminRozpoczecia = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setTerminRozpoczecia(terminRozpoczecia);
    }
    
    public void AukcjaDataOnDemand.setTerminWysylki(Aukcja obj, int index) {
        TerminWysylki terminWysylki = TerminWysylki.class.getEnumConstants()[0];
        obj.setTerminWysylki(terminWysylki);
    }
    
    public void AukcjaDataOnDemand.setTytul(Aukcja obj, int index) {
        String tytul = "tytul_" + index;
        obj.setTytul(tytul);
    }
    
    public void AukcjaDataOnDemand.setWysylkaZaGranice(Aukcja obj, int index) {
        Boolean wysylkaZaGranice = Boolean.TRUE;
        obj.setWysylkaZaGranice(wysylkaZaGranice);
    }
    
    public Aukcja AukcjaDataOnDemand.getSpecificAukcja(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Aukcja obj = data.get(index);
        Long id = obj.getId();
        return Aukcja.findAukcja(id);
    }
    
    public Aukcja AukcjaDataOnDemand.getRandomAukcja() {
        init();
        Aukcja obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Aukcja.findAukcja(id);
    }
    
    public boolean AukcjaDataOnDemand.modifyAukcja(Aukcja obj) {
        return false;
    }
    
    public void AukcjaDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Aukcja.findAukcjaEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Aukcja' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Aukcja>();
        for (int i = 0; i < 10; i++) {
            Aukcja obj = getNewTransientAukcja(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
