// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.wroc.pwr.wiz.io.psi.web.security;

import java.io.UnsupportedEncodingException;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import pl.wroc.pwr.wiz.io.psi.model.security.RolaUzytkownik;
import pl.wroc.pwr.wiz.io.psi.service.dao.UzytkownikService;
import pl.wroc.pwr.wiz.io.psi.service.dao.security.RolaService;
import pl.wroc.pwr.wiz.io.psi.service.dao.security.RolaUzytkownikService;
import pl.wroc.pwr.wiz.io.psi.web.security.RolaMappingController;

privileged aspect RolaMappingController_Roo_Controller {
    
    @Autowired
    RolaUzytkownikService RolaMappingController.rolaUzytkownikService;
    
    @Autowired
    UzytkownikService RolaMappingController.uzytkownikService;
    
    @Autowired
    RolaService RolaMappingController.rolaService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String RolaMappingController.create(@Valid RolaUzytkownik rolaUzytkownik, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, rolaUzytkownik);
            return "security/zarzadzanieRolami/create";
        }
        uiModel.asMap().clear();
        rolaUzytkownikService.saveRolaUzytkownik(rolaUzytkownik);
        return "redirect:/security/zarzadzanieRolami/" + encodeUrlPathSegment(rolaUzytkownik.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String RolaMappingController.createForm(Model uiModel) {
        populateEditForm(uiModel, new RolaUzytkownik());
        return "security/zarzadzanieRolami/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String RolaMappingController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("rolauzytkownik", rolaUzytkownikService.findRolaUzytkownik(id));
        uiModel.addAttribute("itemId", id);
        return "security/zarzadzanieRolami/show";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String RolaMappingController.update(@Valid RolaUzytkownik rolaUzytkownik, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, rolaUzytkownik);
            return "security/zarzadzanieRolami/update";
        }
        uiModel.asMap().clear();
        rolaUzytkownikService.updateRolaUzytkownik(rolaUzytkownik);
        return "redirect:/security/zarzadzanieRolami/" + encodeUrlPathSegment(rolaUzytkownik.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String RolaMappingController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, rolaUzytkownikService.findRolaUzytkownik(id));
        return "security/zarzadzanieRolami/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String RolaMappingController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        RolaUzytkownik rolaUzytkownik = rolaUzytkownikService.findRolaUzytkownik(id);
        rolaUzytkownikService.deleteRolaUzytkownik(rolaUzytkownik);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/security/zarzadzanieRolami";
    }
    
    void RolaMappingController.populateEditForm(Model uiModel, RolaUzytkownik rolaUzytkownik) {
        uiModel.addAttribute("rolaUzytkownik", rolaUzytkownik);
        uiModel.addAttribute("uzytkowniks", uzytkownikService.findAllUzytkowniks());
        uiModel.addAttribute("rolas", rolaService.findAllRolas());
    }
    
    String RolaMappingController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
