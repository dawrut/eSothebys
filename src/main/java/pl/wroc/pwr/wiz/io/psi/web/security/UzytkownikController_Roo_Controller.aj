// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package pl.wroc.pwr.wiz.io.psi.web.security;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.joda.time.format.DateTimeFormat;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.i18n.LocaleContextHolder;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;
import pl.wroc.pwr.wiz.io.psi.model.KontoFakturowe;
import pl.wroc.pwr.wiz.io.psi.model.SposobAktywacji;
import pl.wroc.pwr.wiz.io.psi.model.StanKonta;
import pl.wroc.pwr.wiz.io.psi.model.Uzytkownik;
import pl.wroc.pwr.wiz.io.psi.model.WniosekRejestracyjny;
import pl.wroc.pwr.wiz.io.psi.service.dao.AdresService;
import pl.wroc.pwr.wiz.io.psi.service.dao.ListAktywacyjnyService;
import pl.wroc.pwr.wiz.io.psi.service.dao.UzytkownikService;
import pl.wroc.pwr.wiz.io.psi.service.dao.WniosekRejestracyjnyService;
import pl.wroc.pwr.wiz.io.psi.service.dao.WniosekZmianyImieniaINazwiskaService;
import pl.wroc.pwr.wiz.io.psi.service.dao.ZawieszenieKontaService;
import pl.wroc.pwr.wiz.io.psi.web.security.UzytkownikController;

privileged aspect UzytkownikController_Roo_Controller {
    
    @Autowired
    UzytkownikService UzytkownikController.uzytkownikService;
    
    @Autowired
    AdresService UzytkownikController.adresService;
    
    @Autowired
    ListAktywacyjnyService UzytkownikController.listAktywacyjnyService;
    
    @Autowired
    WniosekRejestracyjnyService UzytkownikController.wniosekRejestracyjnyService;
    
    @Autowired
    WniosekZmianyImieniaINazwiskaService UzytkownikController.wniosekZmianyImieniaINazwiskaService;
    
    @Autowired
    ZawieszenieKontaService UzytkownikController.zawieszenieKontaService;
    
    @RequestMapping(method = RequestMethod.POST, produces = "text/html")
    public String UzytkownikController.create(@Valid Uzytkownik uzytkownik, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, uzytkownik);
            return "security/uzytkownicy/create";
        }
        uiModel.asMap().clear();
        uzytkownikService.saveUzytkownik(uzytkownik);
        return "redirect:/security/uzytkownicy/" + encodeUrlPathSegment(uzytkownik.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", produces = "text/html")
    public String UzytkownikController.createForm(Model uiModel) {
        populateEditForm(uiModel, new Uzytkownik());
        List<String[]> dependencies = new ArrayList<String[]>();
        if (wniosekRejestracyjnyService.countAllWniosekRejestracyjnys() == 0) {
            dependencies.add(new String[] { "wniosekrejestracyjny", "wniosekrejestracyjnys" });
        }
        uiModel.addAttribute("dependencies", dependencies);
        return "security/uzytkownicy/create";
    }
    
    @RequestMapping(value = "/{id}", produces = "text/html")
    public String UzytkownikController.show(@PathVariable("id") Long id, Model uiModel) {
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("uzytkownik", uzytkownikService.findUzytkownik(id));
        uiModel.addAttribute("itemId", id);
        return "security/uzytkownicy/show";
    }
    
    @RequestMapping(produces = "text/html")
    public String UzytkownikController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            final int firstResult = page == null ? 0 : (page.intValue() - 1) * sizeNo;
            uiModel.addAttribute("uzytkowniks", uzytkownikService.findUzytkownikEntries(firstResult, sizeNo));
            float nrOfPages = (float) uzytkownikService.countAllUzytkowniks() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("uzytkowniks", uzytkownikService.findAllUzytkowniks());
        }
        addDateTimeFormatPatterns(uiModel);
        return "security/uzytkownicy/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT, produces = "text/html")
    public String UzytkownikController.update(@Valid Uzytkownik uzytkownik, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            populateEditForm(uiModel, uzytkownik);
            return "security/uzytkownicy/update";
        }
        uiModel.asMap().clear();
        uzytkownikService.updateUzytkownik(uzytkownik);
        return "redirect:/security/uzytkownicy/" + encodeUrlPathSegment(uzytkownik.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", produces = "text/html")
    public String UzytkownikController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        populateEditForm(uiModel, uzytkownikService.findUzytkownik(id));
        return "security/uzytkownicy/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, produces = "text/html")
    public String UzytkownikController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Uzytkownik uzytkownik = uzytkownikService.findUzytkownik(id);
        uzytkownikService.deleteUzytkownik(uzytkownik);
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/security/uzytkownicy";
    }
    
    void UzytkownikController.addDateTimeFormatPatterns(Model uiModel) {
        uiModel.addAttribute("uzytkownik_dataurodzenia_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("uzytkownik_datautworzenia_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("uzytkownik_dataostatniegologowania_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("uzytkownik_odkiedyzawieszone_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("uzytkownik_akceptacjazmianregulaminu_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("uzytkownik_datarozpoczeciazamknieciakonta_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
        uiModel.addAttribute("uzytkownik_datazamknieciakonta_date_format", DateTimeFormat.patternForStyle("M-", LocaleContextHolder.getLocale()));
    }
    
    void UzytkownikController.populateEditForm(Model uiModel, Uzytkownik uzytkownik) {
        uiModel.addAttribute("uzytkownik", uzytkownik);
        addDateTimeFormatPatterns(uiModel);
        uiModel.addAttribute("adreses", adresService.findAllAdreses());
        uiModel.addAttribute("kontofakturowes", KontoFakturowe.findAllKontoFakturowes());
        uiModel.addAttribute("listaktywacyjnys", listAktywacyjnyService.findAllListAktywacyjnys());
        uiModel.addAttribute("sposobaktywacjis", Arrays.asList(SposobAktywacji.values()));
        uiModel.addAttribute("stankontas", Arrays.asList(StanKonta.values()));
        uiModel.addAttribute("wniosekrejestracyjnys", wniosekRejestracyjnyService.findAllWniosekRejestracyjnys());
        uiModel.addAttribute("wniosekzmianyimieniainazwiskas", wniosekZmianyImieniaINazwiskaService.findAllWniosekZmianyImieniaINazwiskas());
        uiModel.addAttribute("zawieszeniekontas", zawieszenieKontaService.findAllZawieszenieKontas());
    }
    
    String UzytkownikController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        } catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
